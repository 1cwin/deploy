#Использовать logos
#Использовать gitsync

Перем Лог;
Перем Runner;
Перем Sync;
Перем ПутьИстории;
Перем КаталогИсходников;
Перем СтрокаПодключения;



procedure Инициализация()
 
    Лог = Логирование.ПолучитьЛог("vega.save.epf");
    Лог.УстановитьУровень(УровниЛога.Отладка);
    
    ВыводПоУмолчанию = Новый ВыводЛогаВКонсоль();
    Лог.ДобавитьСпособВывода(ВыводПоУмолчанию);
	
	ФайлРуннер = Новый Файл("c:\Deploy\runner.os");
	Если ФайлРуннер.Существует() Тогда
		ПодключитьСценарий(ФайлРуннер.ПолноеИмя, "ObjRunner");
		Runner = Новый ObjRunner();
	Иначе
		ВызватьИсключение "Не найден скрипт ""runner.os"" ";
	КонецЕсли;

	ФайлМенеджерСинхронизации = Новый Файл("c:\Deploy\МенеджерСинхронизации.os");
	Если ФайлМенеджерСинхронизации.Существует() Тогда
		ПодключитьСценарий(ФайлМенеджерСинхронизации.ПолноеИмя, "ObjSync");
		Sync = Новый ObjSync();
	Иначе
		ВызватьИсключение "Не найден скрипт ""МенеджерСинхронизации.os"" ";
	КонецЕсли;
		
КонецПроцедуры



procedure ПроверкаНеобходимостиРаботы()

	ТекКаталог = ТекущийКаталог();
	Лог.Отладка("ТекКаталог="+ТекКаталог);

	SystemInfo = new SystemInfo;
	Deploy_Server1C = SystemInfo.GetEnvironmentVariable("Deploy_Server1C");
	Deploy_SourceCatalog = SystemInfo.GetEnvironmentVariable("Deploy_SourceCatalog");
	Лог.Отладка("Deploy_Server1C="+Deploy_Server1C);
	Лог.Отладка("Deploy_SourceCatalog="+Deploy_SourceCatalog);

	РВ = Новый РегулярноеВыражение("\\");
	НачалоПоискаБазы = Ложь;
	ИмяБазы = "";
	МаркерНеобходимостиРазбораОбработок = "history";
	НеобходимостьРазбораОбработок = Ложь;

	ПутьИстории = "";
	
	Для Каждого Параметр Из РВ.Разделить(ТекущийКаталог()) Цикл
		Если Параметр = Deploy_Server1C Тогда
			НачалоПоискаБазы = Истина;
		ИначеЕсли НачалоПоискаБазы = Истина Тогда
			ИмяБазы = Параметр;
			НачалоПоискаБазы = Ложь;
		КонецЕсли;
		
		Если НеобходимостьРазбораОбработок = Ложь Тогда
			ПутьИстории = ОбъединитьПути(ПутьИстории, Параметр + ?(ПутьИстории="", "\", ""));
		КонецЕсли;

		Если МаркерНеобходимостиРазбораОбработок = Параметр Тогда
			НеобходимостьРазбораОбработок = Истина;
		КонецЕсли;
		
		Лог.Отладка(Параметр);
	КонецЦикла;

	Если ИмяБазы = "" Тогда
		Лог.Ошибка("ИмяБазы не определено!");
		ЗавершитьРаботу(1);
	КонецЕсли;

	Если НеобходимостьРазбораОбработок = Ложь Тогда
		Лог.Ошибка("Не обнаружен каталог разбора обработок!");
		ЗавершитьРаботу(1);
	КонецЕсли;

	КаталогИсходников = ОбъединитьПути(Deploy_SourceCatalog, ИмяБазы, "EPF");
	СтрокаПодключения = "/S" + Deploy_Server1C + "\" + ИмяБазы;
	
	Лог.Отладка("ИмяБазы=" + ИмяБазы);  
	Лог.Отладка("КаталогИсходников=" + КаталогИсходников);  
	Лог.Отладка("СтрокаПодключения=" + СтрокаПодключения);  
	Лог.Отладка("ПутьИстории=" + ПутьИстории); 

	ПроверитьИСоздатьКаталог(КаталогИсходников);
	
	Если Sync.ПроверитьНаличиеРепозитарияГит(КаталогИсходников) = Ложь Тогда
		Sync.ИнициализироватьРепозитарий(КаталогИсходников);
	КонецЕсли;
	
	Sync.УстановитьРежимУдаленияВременныхФайлов(Истина);
	
КонецПроцедуры

procedure ПроверитьИСоздатьКаталог(Знач Каталог)

	ФайлКаталога = Новый Файл(Каталог);
	Если ФайлКаталога.Существует() = Ложь Тогда
		СоздатьКаталог(Каталог);
	КонецЕсли; 	

КонецПроцедуры

function Форматировать(Знач Уровень, Знач Сообщение) Экспорт
    Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);
КонецФункции

function ИмяСкрипта()
    ФайлИсточника = Новый Файл(ТекущийСценарий().Источник);
    Возврат ФайлИсточника.ИмяБезРасширения;
КонецФункции

procedure ОбработатьКаталогиСОбработками()

	СписокФайлов = НайтиФайлы(ПутьИстории, ПолучитьМаскуВсеФайлы(), Ложь);
	Для Каждого Файл Из СписокФайлов Цикл

		ПолноеИмя = Файл.ПолноеИмя;
		Лог.Отладка(ПолноеИмя);
		
		Если Файл.ЭтоКаталог() Тогда
			ОбработатьКаталогОбработки(ПолноеИмя);
		КонецЕсли;
		
		
	КонецЦикла	
	
КонецПроцедуры

procedure ОбработатьКаталогОбработки(Знач КаталогОбработки)

	СписокФайлов = НайтиФайлы(КаталогОбработки, "*.e?f", Ложь);
	
	// проверим наличие каталога "commited"
	ПроверитьИСоздатьКаталог(ОбъединитьПути(КаталогОбработки, "commited"));
	
	Для Каждого Файл Из СписокФайлов Цикл

		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		Лог.Отладка("Обработан каталог : " + КаталогОбработки);
		Ошибка = ОбработатьФайлОбработки(Файл, КаталогОбработки);
		Если Ошибка Тогда Прервать; КонецЕсли;
		
	КонецЦикла	
	
КонецПроцедуры

function ОбработатьФайлОбработки(Знач Файл, Знач КаталогОбработки)

	ПолноеИмя = Файл.ПолноеИмя;
	ДатаИзменения = Файл.GetModificationTime();
	КВФ = КаталогВременныхФайлов();
	
	НовоеИмяФайла = ОбъединитьПути(КВФ, Новый Файл(КаталогОбработки).Имя)+ Файл.Расширение;
	КопироватьФайл(ПолноеИмя, НовоеИмяФайла); 
	
	Ошибка = Ложь;
	Попытка
		Runner.Декомпилировать(НовоеИмяФайла, КаталогИсходников,, СтрокаПодключения);
		ВыполнитьКоммит(Файл.Имя, ДатаИзменения);
	Исключение
		Ошибка = Истина;
	КонецПопытки;
	
	Если Ошибка = Ложь Тогда
		Лог.Отладка("Обработан файл : " + ПолноеИмя);
		ПереместитьФайл(ПолноеИмя, ОбъединитьПути(КаталогОбработки, "commited", Файл.Имя));
	КонецЕсли;
	
	Возврат Ошибка;

КонецФункции

procedure ВыполнитьКоммит(Знач Коммент, Знач ДатаИзменения);
	
	Ошибка = Ложь;
	Попытка
		Sync.ВыполнитьКоммитГит(КаталогИсходников, Коммент,, ДатаИзменения);
	Исключение
		Ошибка = Истина;
	КонецПопытки;

КонецПроцедуры



Инициализация();
ПроверкаНеобходимостиРаботы();
ОбработатьКаталогиСОбработками();



