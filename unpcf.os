#Использовать logos
#Использовать gitsync

Перем Лог;
Перем Sync, Runner;
Перем СтрокаПодключения;
Перем ПутьИстории, КаталогИсходников, соотвСозданныхКаталогов;

procedure Инициализация()
 
    Лог = Логирование.ПолучитьЛог("vega.dev.unpack");
    Лог.УстановитьУровень(УровниЛога.Отладка);
    
    ВыводПоУмолчанию = Новый ВыводЛогаВКонсоль();
    Лог.ДобавитьСпособВывода(ВыводПоУмолчанию);
	
	SystemInfo = new SystemInfo;
	dev_Server1C 		= SystemInfo.GetEnvironmentVariable("dev_Server1C");
	dev_Catalog 		= SystemInfo.GetEnvironmentVariable("dev_Catalog");
	dev_SourceCatalog 	= SystemInfo.GetEnvironmentVariable("dev_SourceCatalog");
	
	Лог.Отладка("dev_Server1C=" 	+ dev_Server1C);
	Лог.Отладка("dev_Catalog=" 		+ dev_Catalog);
	Лог.Отладка("dev_SourceCatalog="+ dev_SourceCatalog);
	
	Если dev_Server1C = "" Тогда
		Лог.Ошибка("Сервер разработки не указан! заполните dev_Server1C");
		ЗавершитьРаботу(1);
	КонецЕсли;

	Если dev_Catalog = "" Тогда
		Лог.Ошибка("Каталог скриптов не указан! заполните dev_Catalog");
		ЗавершитьРаботу(1);
	КонецЕсли;

	Если dev_SourceCatalog = "" Тогда
		Лог.Ошибка("Каталог исходников не указан! заполните dev_SourceCatalog");
		ЗавершитьРаботу(1);
	КонецЕсли;

	ФайлМенеджерСинхронизации = Новый Файл(ОбъединитьПути(dev_Catalog, "lib", "МенеджерСинхронизации.os"));
	Если ФайлМенеджерСинхронизации.Существует() Тогда
		ПодключитьСценарий(ФайлМенеджерСинхронизации.ПолноеИмя, "ObjSync");
		Sync = Новый ObjSync();
		Sync.ТихийРежим = Истина;
	Иначе
		Лог.Ошибка("Не найден скрипт ""МенеджерСинхронизации.os"" ");
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	ФайлRunner = Новый Файл(ОбъединитьПути(dev_Catalog, "lib", "Runner.os"));
	Если ФайлRunner.Существует() Тогда
		ПодключитьСценарий(ФайлRunner.ПолноеИмя, "ObjRunner");
		Runner = Новый ObjRunner();
	Иначе
		Runner = Неопределено;
		Лог.Ошибка("Не найден скрипт ""Runner.os"". Разборка обработок и отчетов не подерживается!");
		ЗавершитьРаботу(1);
	КонецЕсли;

	ТекКаталог = ТекущийКаталог();
	Лог.Отладка("ТекКаталог="+ТекКаталог);

	РВ = Новый РегулярноеВыражение("\\");
	НачалоПоискаБазы = Ложь;
	ИмяБазы = "";
	МаркерНеобходимостиРазбораОбработок = "history";
	НеобходимостьРазбора = Ложь;

	ПутьИстории = "";
	Для Каждого Параметр Из РВ.Разделить(ТекКаталог) Цикл
		Если Параметр = dev_Server1C Тогда
			НачалоПоискаБазы = Истина;
		ИначеЕсли НачалоПоискаБазы = Истина Тогда
			ИмяБазы = Параметр;
			НачалоПоискаБазы = Ложь;
		КонецЕсли;
		Если НеобходимостьРазбора = Ложь Тогда
			ПутьИстории = ОбъединитьПути(ПутьИстории, Параметр + ?(ПутьИстории="", "\", ""));
		КонецЕсли;
		Если МаркерНеобходимостиРазбораОбработок = НРег(Параметр) Тогда
			НеобходимостьРазбора = Истина;
		КонецЕсли;
		Лог.Отладка(Параметр);
	КонецЦикла;

	Если ИмяБазы = "" Тогда
		Лог.Ошибка("ИмяБазы не определено!");
		ЗавершитьРаботу(1);
	КонецЕсли;

	Если НеобходимостьРазбора = Ложь Тогда
		Лог.Ошибка("Не обнаружен каталог ""history""!");
		ЗавершитьРаботу(1);
	КонецЕсли;

	КаталогИсходников = ОбъединитьПути(dev_SourceCatalog, ИмяБазы);
	
	Лог.Отладка("ИмяБазы =" + ИмяБазы);  
	Лог.Отладка("ПутьИстории =" + ПутьИстории); 

	СтрокаПодключения = "/S" + dev_Server1C + "\" + ИмяБазы;
	Лог.Отладка("СтрокаПодключения="+СтрокаПодключения);
	
	соотвСозданныхКаталогов = Новый Соответствие;

	КаталогИсходниковCF = ОбъединитьПути(КаталогИсходников, "CF");
	ПроверитьИСоздатьКаталог(КаталогИсходниковCF);
	
	Если Sync.ПроверитьНаличиеРепозитарияГит(КаталогИсходниковCF) = Ложь Тогда
		Sync.ИнициализироватьРепозитарий(КаталогИсходниковCF);
	КонецЕсли;
	
	Если ЕстьРаспаковщикОтчетовИОбработок() Тогда
		КаталогИсходниковEPF = ОбъединитьПути(КаталогИсходников, "EPF");
		ПроверитьИСоздатьКаталог(КаталогИсходниковEPF);
		Если Sync.ПроверитьНаличиеРепозитарияГит(КаталогИсходниковEPF) = Ложь Тогда
			Sync.ИнициализироватьРепозитарий(КаталогИсходниковEPF);
		КонецЕсли;

		КаталогИсходниковERF = ОбъединитьПути(КаталогИсходников, "ERF");
		ПроверитьИСоздатьКаталог(КаталогИсходниковERF);
		Если Sync.ПроверитьНаличиеРепозитарияГит(КаталогИсходниковERF) = Ложь Тогда
			Sync.ИнициализироватьРепозитарий(КаталогИсходниковERF);
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьКаталогИстории();
	
endprocedure

function ЕстьРаспаковщикОтчетовИОбработок() Экспорт
    Возврат НЕ (Runner = Неопределено);
endfunction

procedure ПроверитьИСоздатьКаталог(Знач Каталог)
	Если соотвСозданныхКаталогов.Получить(Каталог) = Неопределено Тогда
		ФайлКаталога = Новый Файл(Каталог);
		Если НЕ ФайлКаталога.Существует() Тогда
			СоздатьКаталог(Каталог);
			Лог.Отладка("Создан каталог = "+Каталог);
		КонецЕсли; 	
		соотвСозданныхКаталогов.Вставить(Каталог, Истина);
	КонецЕсли;
endprocedure

function Форматировать(Знач Уровень, Знач Сообщение) Экспорт
    Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);
endfunction

procedure ОбработатьКаталогИстории()

	КаталогCF  = ОбъединитьПути(ПутьИстории, "CF");
	ПроверитьИСоздатьКаталог(ОбъединитьПути(КаталогCF, "commited"));

	//cf
	СписокФайлов = НайтиФайлы(КаталогCF, "*.cf", Ложь);
	// предобработка (необходимо выполнить в порядке возрастания даты, иначе список будет сортирован по наименованию)
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("Имя");
	ТЗ.Колонки.Добавить("ПолноеИмя");
	ТЗ.Колонки.Добавить("Расширение");
	ТЗ.Колонки.Добавить("ВремяИзменения");

	Для Каждого Файл Из СписокФайлов Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		НС = ТЗ.Добавить();
		НС.Имя = Файл.Имя;
		НС.ПолноеИмя = Файл.ПолноеИмя;
		НС.Расширение = Файл.Расширение;
		НС.ВремяИзменения = Файл.ПолучитьВремяИзменения();
	КонецЦикла;
	ТЗ.Сортировать("ВремяИзменения");
	
	Для Каждого Файл Из ТЗ Цикл
		Ошибка = ОбработатьФайлCF(Файл);
		Если Ошибка Тогда Прервать; КонецЕсли;
	КонецЦикла;
	
	//epf, ert
	
	Если ЕстьРаспаковщикОтчетовИОбработок() Тогда
		КаталогEPF = ОбъединитьПути(ПутьИстории, "EPF");
		СписокФайлов = НайтиФайлы(КаталогEPF, ПолучитьМаскуВсеФайлы(), Ложь);
		Для Каждого Файл Из СписокФайлов Цикл
			Если Файл.ЭтоКаталог() Тогда
				ОбработатьКаталогОтчетовИОбработок(Файл.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
		КаталогERF = ОбъединитьПути(ПутьИстории, "ERF");
		СписокФайлов = НайтиФайлы(КаталогERF, ПолучитьМаскуВсеФайлы(), Ложь);
		Для Каждого Файл Из СписокФайлов Цикл
			Если Файл.ЭтоКаталог() Тогда
				ОбработатьКаталогОтчетовИОбработок(Файл.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
endprocedure

procedure ОбработатьКаталогОтчетовИОбработок(Знач КаталогОтчетаОбработки)

	СписокФайлов = НайтиФайлы(КаталогОтчетаОбработки, "*.e?f", Ложь);
	ПроверитьИСоздатьКаталог(ОбъединитьПути(КаталогОтчетаОбработки, "commited"));
	
	// предобработка (необходимо выполнить в порядке возрастания даты, иначе список будет сортирован по наименованию)
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("Имя");
	ТЗ.Колонки.Добавить("ПолноеИмя");
	ТЗ.Колонки.Добавить("Расширение");
	ТЗ.Колонки.Добавить("ВремяИзменения");

	Для Каждого Файл Из СписокФайлов Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		НС = ТЗ.Добавить();
		НС.Имя = Файл.Имя;
		НС.ПолноеИмя = Файл.ПолноеИмя;
		НС.Расширение = Файл.Расширение;
		НС.ВремяИзменения = Файл.ПолучитьВремяИзменения();
	КонецЦикла;
	ТЗ.Сортировать("ВремяИзменения");
	
	Для Каждого Файл Из ТЗ Цикл
		Ошибка = ОбработатьФайлОтчетаОбработки(Файл, КаталогОтчетаОбработки);
		Если Ошибка Тогда Прервать; КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

function ОбработатьФайлОтчетаОбработки(Знач Файл, Знач КаталогОтчетаОбработки)

	КВФ = КаталогВременныхФайлов();
	ИмяОтчетаОбработки = Новый Файл(КаталогОтчетаОбработки).Имя;
	НовоеИмяФайла = ОбъединитьПути(КВФ, ИмяОтчетаОбработки)+ Файл.Расширение;
	КопироватьФайл(Файл.ПолноеИмя, НовоеИмяФайла); 
	
	КаталогИсходниковНазначение = ОбъединитьПути(КаталогИсходников, Врег(Прав(Файл.Расширение, 3)));
	
	Ошибка = Ложь;
	Попытка
		Runner.Декомпилировать(НовоеИмяФайла, КаталогИсходниковНазначение,, СтрокаПодключения);
		ВыполнитьКоммит(КаталогИсходниковНазначение, "" + ИмяОтчетаОбработки + " (" + Файл.Имя + ")", Файл.ВремяИзменения);
	Исключение
		Ошибка = Истина;
	КонецПопытки;
	
	Если Ошибка = Ложь Тогда
		ПереместитьФайл(Файл.ПолноеИмя, ОбъединитьПути(КаталогОтчетаОбработки, "commited", Файл.Имя));
		Лог.Отладка("Обработан файл : " + Файл.Имя);
	КонецЕсли;
	
	УдалитьФайлы(НовоеИмяФайла);
	
	Возврат Ошибка;

КонецФункции

function ОбработатьФайлCF(Знач Файл)

	КаталогИсходниковCF = ОбъединитьПути(КаталогИсходников, "CF");
	Ошибка = Ложь;
	Попытка
		Sync.РазобратьФайлКонфигурации(Файл.ПолноеИмя, КаталогИсходниковCF, РежимВыгрузкиФайлов.Авто);
		ВыполнитьКоммит(КаталогИсходниковCF, Файл.Имя, Файл.ВремяИзменения);
	Исключение
		Ошибка = Истина;
	КонецПопытки;
	
	Если Ошибка = Ложь Тогда
		ПереместитьФайл(Файл.ПолноеИмя, ОбъединитьПути(ПутьИстории, "CF", "commited", Файл.Имя));
		Лог.Отладка("Обработан файл:" + Файл.Имя);
	КонецЕсли;
	
	Возврат Ошибка;

endfunction

procedure ВыполнитьКоммит(Знач Каталог, Знач Коммент, Знач ВремяИзменения);
	
	Автор = "";
	Ошибка = Ложь;
	Попытка
		Sync.ВыполнитьКоммитГит(Каталог, Коммент, Автор, ВремяИзменения);
	Исключение
		Лог.Ошибка("Ошибка коммита " + Коммент);
		Ошибка = Истина;
	КонецПопытки;

endprocedure


Инициализация();



