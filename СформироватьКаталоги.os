#Использовать logos
#Использовать gitsync

Перем Лог;
Перем dev_EPF;
Перем МассивИзмененных;
Перем Sync;
Перем соотвСозданныхКаталогов;

procedure Инициализация()
 
    Лог = Логирование.ПолучитьЛог("vega.dev.createcatalogs");
    Лог.УстановитьУровень(УровниЛога.Отладка);
    
    ВыводПоУмолчанию = Новый ВыводЛогаВКонсоль();
    Лог.ДобавитьСпособВывода(ВыводПоУмолчанию);
	
	SystemInfo = new SystemInfo;
	dev_EPF 			= SystemInfo.GetEnvironmentVariable("dev_EPF");
	dev_Server1C 		= SystemInfo.GetEnvironmentVariable("dev_Server1C");
	dev_Catalog 		= SystemInfo.GetEnvironmentVariable("dev_Catalog");
	
	Лог.Отладка("dev_EPF="+dev_EPF);
	Лог.Отладка("dev_Server1C="+dev_Server1C);
	Лог.Отладка("dev_Catalog="+dev_Catalog);
	
	Если dev_Server1C = "" Тогда
		Лог.Ошибка("Сервер разработки не указан! заполните dev_Server1C");
		ЗавершитьРаботу(1);
	КонецЕсли;

	Если dev_Catalog = "" Тогда
		Лог.Ошибка("Каталог скриптов не указан! заполните dev_Catalog");
		ЗавершитьРаботу(1);
	КонецЕсли;

	Если dev_EPF = "" Тогда
		Лог.Ошибка("Каталог исходников не указан! заполните dev_EPF");
		ЗавершитьРаботу(1);
	КонецЕсли;

	ФайлМенеджерСинхронизации = Новый Файл(ОбъединитьПути(dev_Catalog, "lib", "МенеджерСинхронизации.os"));
	Если ФайлМенеджерСинхронизации.Существует() Тогда
		ПодключитьСценарий(ФайлМенеджерСинхронизации.ПолноеИмя, "ObjSync");
		Sync = Новый ObjSync();
		Sync.ТихийРежим = Истина;
	Иначе
		Лог.Ошибка("Не найден скрипт ""МенеджерСинхронизации.os"" ");
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	ПроверитьИСоздатьGit_EPFDir();

	МассивИзмененных = Новый Массив;
	ОбработатьСтатусы();
	
	Если МассивИзмененных.Количество()=0 Тогда
		Лог.Ошибка("Не найдено измененных обработок");
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	соотвСозданныхКаталогов = Новый Соответствие;
	РВ = Новый РегулярноеВыражение("/");
	Для Каждого ПолноеИмя из МассивИзмененных Цикл
		Файл = Новый Файл(ОбъединитьПути(dev_EPF, ПолноеИмя)); //	ПолноеИмя = ИмяБазы/ИмяОбработки.epf
		Если НЕ Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;
		ИмяБазы = "";
		Поиск = РВ.Разделить(ПолноеИмя);
		Если Поиск.Количество()<2 Тогда // не указана база или файл в корне - не обрабатываем
			Продолжить;
		ИначеЕсли Поиск.Количество()>1 Тогда
			ИмяБазы = Поиск.Получить(0);
		КонецЕсли;
		Если ИмяБазы = "" Тогда
			Лог.Ошибка("ИмяБазы не определено!");
			Продолжить;
		КонецЕсли;
		Лог.Отладка("ИмяБазы=" + ИмяБазы);
		
		КаталогБазы = ОбъединитьПути(dev_EPF, ИмяБазы); //	Диск:\ИмяСервера1с\ИмяБазы
		КаталогИстории = ОбъединитьПути(КаталогБазы, "history"); //	Диск:\ИмяСервера1с\ИмяБазы\history
		ПроверитьИСоздатьКаталог(КаталогИстории);
		
		КаталогНазначения = ОбъединитьПути(КаталогИстории, Врег(СокрЛП(Сред(Файл.Расширение,2)))); //	+ EPF или ERF
		ПроверитьИСоздатьКаталог(КаталогНазначения);
		
		СоздаваемыйКаталог = ОбъединитьПути(КаталогНазначения, Файл.ИмяБезРасширения); //	Диск:\ИмяСервера1с\ИмяБазы\history\EPF\ИмяОбработки
		ПроверитьИСоздатьКаталог(СоздаваемыйКаталог);
		
		КопироватьФайл(ОбъединитьПути(dev_EPF, Файл.ПолноеИмя), ОбъединитьПути(СоздаваемыйКаталог, Файл.Имя)); //	в него помещаем обработку
		
	КонецЦикла;

КонецПроцедуры

procedure ПроверитьИСоздатьКаталог(Знач Каталог)
	Если соотвСозданныхКаталогов.Получить(Каталог) = Неопределено Тогда
		ФайлКаталога = Новый Файл(Каталог);
		Если НЕ ФайлКаталога.Существует() Тогда
			СоздатьКаталог(Каталог);
			Лог.Отладка("Создан каталог = "+Каталог);
		КонецЕсли; 	
		соотвСозданныхКаталогов.Вставить(Каталог, Истина);
	КонецЕсли;
endprocedure

procedure ПроверитьИСоздатьGit_EPFDir()

	//	если нет файла .gitignore то перед инициализацией репозитория
	//	создаем его, чтобы после git init сразу получить командой git status все необходимые файлы
	
	Файл = Новый Файл(ОбъединитьПути(dev_EPF, ".gitignore"));
	Если НЕ Файл.Существует() Тогда
		Запись = Новый ЗаписьТекста(Файл.ПолноеИмя);
		Запись.ЗаписатьСтроку("*");	// запрещаем все
		Запись.ЗаписатьСтроку("!/*/*.e?f"); // кроме файлов обработок и отчетов в каталогах базы формата: ИмяБазы/Имяфайла.epf или erf
		Запись.ЗаписатьСтроку("!*/"); // разрешаем смотреть во вложенных каталогах
		Запись.ЗаписатьСтроку(".*/");// отключаем служебные каталоги начинающиеся с .
		Запись.Закрыть();
	КонецЕсли;
	
	Если Sync.ПроверитьНаличиеРепозитарияГит(dev_EPF) = Ложь Тогда
		Sync.ИнициализироватьРепозитарий(dev_EPF);
	КонецЕсли;
	
endprocedure

procedure ОбработатьСтатусы()
	СформироватьНовыйФайлСтатус();
	ПолучитьОтличия();
КонецПроцедуры

procedure СформироватьНовыйФайлСтатус()
	кодВозврата = ВыполнитьКомандныйФайл(СоздатьКомандныйФайл());
	Если кодВозврата<>0 Тогда
		Лог.Ошибка("Не удалось записать .status");
		ЗавершитьРаботу(кодВозврата);
	КонецЕсли;
КонецПроцедуры

procedure ПолучитьОтличия()
	Файл = Новый Файл(ОбъединитьПути(dev_EPF, ".status"));
	Если Файл.Существует() Тогда
		Чтение = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.utf8);
		Стр = Чтение.ПрочитатьСтроку();
		Пока Стр <> Неопределено Цикл
			Расш = Нрег(Прав(Стр,4));
			Если Расш = ".epf" ИЛИ Расш = ".erf" Тогда
				ИмяФайла = СокрЛ(Стр);
				ДобавитьВМассив(ИмяФайла);
			КонецЕсли;
			Стр = Чтение.ПрочитатьСтроку();
		КонецЦикла;
		Чтение.Закрыть();
	КонецЕсли;
КонецПроцедуры

procedure ДобавитьВМассив(Знач ПолныйПуть)
	Файл = Новый Файл(ОбъединитьПути(dev_EPF, ПолныйПуть));
	Если Файл.Существует() Тогда
		МассивИзмененных.Добавить(ПолныйПуть);
	КонецЕсли;
КонецПроцедуры

function СоздатьКомандныйФайл()
	Файл = Новый КомандныйФайл();
	Файл.Открыть(ОбъединитьПути(dev_EPF, "query.cmd"));
	Файл.Добавить("@echo off");
	Файл.Добавить("cd /d " + dev_EPF);
	Файл.Добавить("git status --untracked-files=all > .status");
	Файл.Добавить("exit /b %ERRORLEVEL%");
	Возврат Файл;
КонецФункции

function ВыполнитьКомандныйФайл(Знач ДескрипторКомандногоФайла)
	Возврат ДескрипторКомандногоФайла.Выполнить();
КонецФункции




Инициализация();



