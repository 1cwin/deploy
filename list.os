#Использовать logos
#Использовать gitsync

Перем Лог;
Перем Deploy_EPFDir, Кеш, КешНовый;
Перем МассивИзмененных;
Перем Sync, Runner;
Перем СтрокаПодключения;

procedure Инициализация()
 
    Лог = Логирование.ПолучитьЛог("vega.getnew.epf");
    Лог.УстановитьУровень(УровниЛога.Отладка);
    
    ВыводПоУмолчанию = Новый ВыводЛогаВКонсоль();
    Лог.ДобавитьСпособВывода(ВыводПоУмолчанию);
	
	SystemInfo = new SystemInfo;
	Deploy_EPFDir 			= SystemInfo.GetEnvironmentVariable("Deploy_EPFDir");
	Deploy_Server1C 		= SystemInfo.GetEnvironmentVariable("Deploy_Server1C");
	Deploy_Catalog 			= SystemInfo.GetEnvironmentVariable("Deploy_Catalog");
	Deploy_SourceCatalog 	= SystemInfo.GetEnvironmentVariable("Deploy_SourceCatalog");
	
	Лог.Отладка("Deploy_EPFDir="+Deploy_EPFDir);
	Лог.Отладка("Deploy_Server1C="+Deploy_Server1C);
	Лог.Отладка("Deploy_Catalog="+Deploy_Catalog);
	Лог.Отладка("Deploy_SourceCatalog="+Deploy_SourceCatalog);
	
	Если Deploy_Server1C = "" Тогда
		Лог.Ошибка("Сервер разработки не указан! заполните Deploy_Server1C");
		ЗавершитьРаботу(1);
	КонецЕсли;

	Если Deploy_Catalog = "" Тогда
		Лог.Ошибка("Каталог скриптов не указан! заполните Deploy_Catalog");
		ЗавершитьРаботу(1);
	КонецЕсли;

	Если Deploy_SourceCatalog = "" Тогда
		Лог.Ошибка("Каталог исходников не указан! заполните Deploy_SourceCatalog");
		ЗавершитьРаботу(1);
	КонецЕсли;

	ФайлМенеджерСинхронизации = Новый Файл(ОбъединитьПути(Deploy_Catalog, "МенеджерСинхронизации.os"));
	Если ФайлМенеджерСинхронизации.Существует() Тогда
		ПодключитьСценарий(ФайлМенеджерСинхронизации.ПолноеИмя, "ObjSync");
		Sync = Новый ObjSync();
		Sync.ТихийРежим = Истина;
	Иначе
		Лог.Ошибка("Не найден скрипт ""МенеджерСинхронизации.os"" ");
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	ФайлRunner = Новый Файл(ОбъединитьПути(Deploy_Catalog, "Runner.os"));
	Если ФайлRunner.Существует() Тогда
		ПодключитьСценарий(ФайлRunner.ПолноеИмя, "ObjRunner");
		Runner = Новый ObjRunner();
	Иначе
		Runner = Неопределено;
		Лог.Ошибка("Не найден скрипт ""Runner.os"". Разборка EPF не подерживается!");
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	ПроверитьИСоздатьGit_EPFDir();

	Кеш = Новый Соответствие;
	КешНовый = Новый Соответствие;
	МассивИзмененных = Новый Массив;
	
	Файл = Новый Файл(ОбъединитьПути(Deploy_EPFDir, ".cache"));
	Если Файл.Существует() Тогда
		ПрочитатьКешФайл();
		ОбработатьСтатусы();
	Иначе
		ОбработатьСтатусы();
		ЗаписатьКешФайл();
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	Если МассивИзмененных.Количество()=0 Тогда
		Лог.Ошибка("Не найдено измененных обработок");
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	соотвКаталоговИсходников = Новый Соответствие;
	РВ = Новый РегулярноеВыражение("/");
	Для Каждого ПолноеИмя из МассивИзмененных Цикл

		Файл = Новый Файл(ОбъединитьПути(Deploy_EPFDir, ПолноеИмя));
		Если НЕ Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;

		ИмяБазы = "";
		Поиск = РВ.Разделить(ПолноеИмя);
		Если Поиск.Количество()<2 Тогда
			Продолжить; // без каталога (служебный)
		ИначеЕсли Поиск.Количество()>1 Тогда
			ИмяБазы = Поиск.Получить(0);
		КонецЕсли;
		Если ИмяБазы = "" ИЛИ Лев(ИмяБазы, 1)="." Тогда
			Лог.Ошибка("ИмяБазы не определено!");
			Продолжить;
		КонецЕсли;
		Лог.Отладка("ИмяБазы=" + ИмяБазы);
	
		КаталогИсходников = ОбъединитьПути(Deploy_SourceCatalog, ИмяБазы, Врег(Прав(Файл.Расширение)));
		СтрокаПодключения = "/S" + Deploy_Server1C + "\" + ИмяБазы;
		Лог.Отладка("КаталогИсходников="+КаталогИсходников);
		Лог.Отладка("СтрокаПодключения="+СтрокаПодключения);

		Если соотвКаталоговИсходников.Получить(КаталогИсходников) = Неопределено Тогда
			ПроверитьИСоздатьКаталог(КаталогИсходников);
			Если Sync.ПроверитьНаличиеРепозитарияГит(КаталогИсходников) = Ложь Тогда
				Sync.ИнициализироватьРепозитарий(КаталогИсходников);
			КонецЕсли;
			соотвКаталоговИсходников.Вставить(КаталогИсходников, Истина);
		КонецЕсли;
		
		Ошибка = Ложь;
		Попытка
			Runner.Декомпилировать(Файл.ПолноеИмя, КаталогИсходников,, СтрокаПодключения);
			ВыполнитьКоммит(КаталогИсходников, Файл.Имя, Файл.ПолучитьВремяИзменения());
		Исключение
			Ошибка = Истина;
		КонецПопытки;
		
		Если Ошибка Тогда
			ПредДата = Кеш.Получить(ПолноеИмя);
			Если ПредДата<>Неопределено Тогда КешНовый.Вставить(ПолноеИмя, ПредДата); КонецЕсли;	
		Иначе
			Лог.Отладка("Обработан файл : " + Файл.Имя);
		КонецЕсли;
		
	КонецЦикла;
	ЗаписатьКешФайл();

КонецПроцедуры

procedure ПроверитьИСоздатьКаталог(Знач Каталог)
	ФайлКаталога = Новый Файл(Каталог);
	Если НЕ ФайлКаталога.Существует() Тогда
		СоздатьКаталог(Каталог);
	КонецЕсли; 	
endprocedure

procedure ПроверитьИСоздатьGit_EPFDir()

	Файл = Новый Файл(ОбъединитьПути(Deploy_EPFDir, ".gitignore"));
	Если НЕ Файл.Существует() Тогда
		Запись = Новый ЗаписьТекста(Файл.ПолноеИмя);
		Запись.ЗаписатьСтроку("*");
		Запись.ЗаписатьСтроку("!/*/*.e?f");
		Запись.ЗаписатьСтроку("!*/");
		Запись.Закрыть();
	КонецЕсли;
	
	Если Sync.ПроверитьНаличиеРепозитарияГит(Deploy_EPFDir) = Ложь Тогда
		Sync.ИнициализироватьРепозитарий(Deploy_EPFDir);
	КонецЕсли;
	
endprocedure

procedure ВыполнитьКоммит(Знач Каталог, Знач Коммент, Знач ДатаИзменения);
	
	Автор = "";
	Ошибка = Ложь;
	Попытка
		Sync.ВыполнитьКоммитГит(Каталог, Коммент, Автор, ДатаИзменения);
	Исключение
		Лог.Ошибка("Ошибка коммита " + Коммент);
		Ошибка = Истина;
	КонецПопытки;

endprocedure

procedure ОбработатьСтатусы()
	СформироватьНовыйФайлСтатус();
	ПолучитьОтличия();
КонецПроцедуры

procedure ПрочитатьКешФайл()

	ИмяФК = ОбъединитьПути(Deploy_EPFDir, ".cache");
	Чтение = Новый ЧтениеТекста(ИмяФК, КодировкаТекста.utf8);
	Стр = Чтение.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл
		ВремяИзменения = Лев(Стр, 25);
		ПолныйПуть = Сред(Стр, 26);
		Кеш.Вставить(ПолныйПуть, ВремяИзменения);
		Стр = Чтение.ПрочитатьСтроку();
	КонецЦикла;
	Чтение.Закрыть();

КонецПроцедуры

procedure ЗаписатьКешФайл()

	ИмяФК = ОбъединитьПути(Deploy_EPFDir, ".cache");
	Запись = Новый ЗаписьТекста(ИмяФК);
	Для Каждого КлючЗначение Из КешНовый Цикл
		ВремяИзменения = Строка(КлючЗначение.Значение);
		Если ВремяИзменения="" Тогда Продолжить; КонецЕсли;
		Пока СтрДлина(ВремяИзменения)<25 Цикл ВремяИзменения=ВремяИзменения + " "; КонецЦикла;
		Запись.ЗаписатьСтроку(ВремяИзменения + КлючЗначение.Ключ);
	КонецЦикла;
	Запись.Закрыть();

КонецПроцедуры

procedure ПолучитьОтличия()

	Файл = Новый Файл(ОбъединитьПути(Deploy_EPFDir, ".status"));
	Если Файл.Существует() Тогда
		Чтение = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.utf8);
		Стр = Чтение.ПрочитатьСтроку();
		Пока Стр <> Неопределено Цикл
			Расш = Нрег(Прав(Стр,4));
			Если Расш = ".epf" ИЛИ Расш = ".erf" Тогда
				ИмяФайла = СокрЛ(Стр);
				ПроверитьИзменения(ИмяФайла);
			КонецЕсли;
			Стр = Чтение.ПрочитатьСтроку();
		КонецЦикла;
		Чтение.Закрыть();
	КонецЕсли;

КонецПроцедуры

procedure ПроверитьИзменения(Знач ПолныйПуть)

	Файл = Новый Файл(ОбъединитьПути(Deploy_EPFDir, ПолныйПуть));
	НовоеВремя = "";
	Если Файл.Существует() Тогда
		ВремяИзменения = Кеш.Получить(ПолныйПуть);
		НовоеВремя = Строка(Файл.ПолучитьВремяИзменения());
		Если СокрЛП(ВремяИзменения) = "" Тогда
			МассивИзмененных.Добавить(ПолныйПуть);
			Лог.Отладка("Новый = "+ ПолныйПуть);
		ИначеЕсли СокрЛП(ВремяИзменения)<>СокрЛП(НовоеВремя) Тогда
			МассивИзмененных.Добавить(ПолныйПуть);
			Лог.Отладка("Изменен = "+ ПолныйПуть);
		КонецЕсли;
	КонецЕсли;
	КешНовый.Вставить(ПолныйПуть, НовоеВремя);

КонецПроцедуры

function СоздатьКомандныйФайл()

	Файл = Новый КомандныйФайл();
	Файл.Открыть(ОбъединитьПути(Deploy_EPFDir, "query.cmd"));
	Файл.Добавить("@echo off");
	Файл.Добавить("cd /d " + Deploy_EPFDir);
	Файл.Добавить("git status --untracked-files=all > .status");
	Файл.Добавить("exit /b %ERRORLEVEL%");
	
	Возврат Файл;

КонецФункции

function ВыполнитьКомандныйФайл(Знач ДескрипторКомандногоФайла)
	Возврат ДескрипторКомандногоФайла.Выполнить();
КонецФункции

procedure СформироватьНовыйФайлСтатус()

	кодВозврата = ВыполнитьКомандныйФайл(СоздатьКомандныйФайл());
	Если кодВозврата<>0 Тогда
		Лог.Ошибка("Не удалось записать .status");
		ЗавершитьРаботу(кодВозврата);
	КонецЕсли;

КонецПроцедуры


Инициализация();



